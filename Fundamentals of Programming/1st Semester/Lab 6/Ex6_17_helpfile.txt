Afiseaza Matricea in Zig Zag

00  01  02  03
10  11  12  13
20  21  22  23
30  31  32  33

row = 4, col = 4;

repetitii   inceput               conditie i        DA/NU    i     j
[0]         [00]                repetitii < row (0<4) DA    [0]   [0]
[1]         [01]  10            repetitii < col (1<4) DA    [0]   [1]
[2]         [20]  11  02        repetitii < row (2<4) DA    [2]   [0]
[3]         [03]  12  21  30    repetitii < col (3<4) DA    [0]   [3]
[4]         [31]  22  13        repetitii < row (4<4) NU    [3]   [1]
[5]         [23]  32            repetitii < col (5<4) NU    [2]   [3]
[6]         [33]                repetitii < row (6<4) NU    [3]   [3]

inceput --> reprezinta index(i,j) al matricei format dupa verificarea conditiei dupa care
            incepe loop-ul //while(i < row && j >= 0)
                                printf("%2d ", M[i++][j--]);
                       sau //while(i >= 0 && j < col)
                                printf("%2d ", M[i--][j++]);
                       depinzand de valoarea variabilei [repetitii]

-------------------------------------------------------------------------------------------------------
Afiseaza Matricea in Spirala

 00   01   02   03   04   05   06                       // i_jos = 0      // j_jos = 7
 10  [11]  12   13   14   15  [16]                      // i_stanga = 7   // j_stanga = 6
 20   21  [22]  23   24  [25]  26                       // i_sus = 6      // j_sus = -1
 30   31  [32] [33] [34]  35   36                       // i_dreapta = 0  // j_dreapta = 0
 40  [41]  42  [43]  44   45   46
[50]  51   52   53  [54]  55   56
 60   61   62   63   64  [65]  66
 
 Valorile initiale au o diferenta de 1 pe + sau - deoarece vor fi incrementate/decrementate
  la fiecare intrare in conditie.
 
 aux  conditie indexi initiali indexi de inceput   repetitii   valorile printate
                   i j             i j
  -      -        [0,0]           [0,0]               -         00  01  02  03  04  05  06
 [1]     0      ++[0,7]--         [1,6]               6         16  26  36  46  56  66
 [2]     1      --[7,6]--         [6,5]               6         65  64  63  62  61  60
 [3]     2      --[6,-1]++        [5,0]               5         50  40  30  20  10
 [4]     3      ++[0,0]++         [1,1]               5         11  12  13  14  15
 [5]     0      ++[1,6]--         [2,5]               4         25  35  45  55
 [6]     1      --[6,5]--         [5,4]               4         54  53  52  51
 [7]     2      --[5,0]++         [4,1]               3         41  31  21
 [8]     3      ++[1,1]++         [2,2]               3         22  23  24
 [9]     0      ++[2,5]--         [3,4]               2         34  44
 [10]    1      --[5,4]--         [4,3]               2         43  42
 [11]    2      --[4,1]++         [3,2]               1         32
 [12]    3      ++[2,2]++         [3,3]               1         33
 
 
